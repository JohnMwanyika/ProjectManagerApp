generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model role {
  role_id     Int    @id @default(autoincrement())
  role_name   String @db.VarChar(50)
  description String @db.Text
  users       user[]
}

model task {
  task_id              Int              @id @default(autoincrement())
  title                String           @db.VarChar(255)
  description          String           @db.Text
  created_at           DateTime         @default(now()) @db.DateTime(0)
  updated_at           DateTime         @default(now()) @db.DateTime(0)
  due_in               DateTime         @db.DateTime(0)
  status_id            Int              @default(1)
  user_id              Int
  start_at             DateTime         @default(now()) @db.DateTime(0)
  milestoneMilestoneId Int?
  projectProjectId     Int?
  task_status          task_status      @relation(fields: [status_id], references: [status_id], map: "task_ibfk_1")
  milestoneId          milestone?       @relation(fields: [milestoneMilestoneId], references: [milestoneId])
  projectId            project?         @relation(fields: [projectProjectId], references: [projectId])
  user                 user             @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "user_fk")
  taskassignment       taskassignment[]

  @@index([status_id], map: "status_id")
  @@index([user_id], map: "user_id")
  @@index([milestoneMilestoneId], map: "task_milestoneMilestoneId_fkey")
  @@index([projectProjectId], map: "task_projectProjectId_fkey")
}

model task_status {
  status_id   Int    @id @default(autoincrement())
  status_name String @db.VarChar(50)
  description String @db.Text
  tasks       task[]
}

model user {
  user_id        Int              @id @default(autoincrement())
  first_name     String           @db.VarChar(50)
  last_name      String           @db.VarChar(50)
  username       String           @unique(map: "username") @db.VarChar(50)
  email          String           @unique(map: "email") @db.VarChar(50)
  password       String           @db.VarChar(255)
  role_id        Int              @default(2)
  phone          Int?
  organization   String?          @db.VarChar(255)
  role           role             @relation(fields: [role_id], references: [role_id], map: "role_fk")
  tasks          task[]
  team           team[]
  taskassignment taskassignment[]

  @@index([role_id], map: "role_id")
}

model project {
  name                   String         @db.VarChar(255)
  Start_date             DateTime       @db.DateTime(0)
  created_at             DateTime       @default(now()) @db.DateTime(0)
  updated_at             DateTime       @default(now()) @db.DateTime(0)
  due_in                 DateTime       @db.DateTime(0)
  end_date               DateTime       @db.DateTime(0)
  projectId              Int            @id @default(autoincrement())
  project_statusStatusId Int            @default(2)
  description            String         @db.Text
  statusId               project_status @relation(fields: [project_statusStatusId], references: [statusId])
  milestone              milestone[]
  task                   task[]
  team                   team[]

  @@index([project_statusStatusId], map: "project_project_statusStatusId_fkey")
}

model project_status {
  statusId    Int       @id @default(autoincrement())
  status_name String    @db.VarChar(255)
  description String    @db.Text
  project     project[]
}

model team {
  teamId           Int     @id @default(autoincrement())
  userUser_id      Int
  projectProjectId Int
  projectId        project @relation(fields: [projectProjectId], references: [projectId])
  userId           user    @relation(fields: [userUser_id], references: [user_id])

  @@index([projectProjectId], map: "team_projectProjectId_fkey")
  @@index([userUser_id], map: "team_userUser_id_fkey")
}

model milestone {
  name             String  @db.VarChar(255)
  description      String  @db.Text
  milestoneId      Int     @id @default(autoincrement())
  projectProjectId Int
  projectId        project @relation(fields: [projectProjectId], references: [projectId])
  task             task[]

  @@index([projectProjectId], map: "milestone_projectProjectId_fkey")
}

model taskassignment {
  assignmentId Int  @id @default(autoincrement())
  taskId       task @relation(fields: [taskTask_id], references: [task_id])
  userId       user @relation(fields: [userUser_id], references: [user_id])
  taskTask_id  Int
  userUser_id  Int
}
